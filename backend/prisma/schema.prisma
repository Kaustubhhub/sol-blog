// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id               String    @id @default(uuid())
  wallet           String    @unique // Solana Wallet Address
  name             String?
  bio              String?
  avatar           String?
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  sentPayments     Payment[] @relation("SenderRelation")
  receivedPayments Payment[] @relation("ReceiverRelation")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  image     String?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes
}

model Payment {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  amount     Float
  txId       String   @unique // Solana transaction ID
  status     String   @default("pending") // pending, success, failed
  createdAt  DateTime @default(now())

  sender   User @relation("SenderRelation", fields: [senderId], references: [id])
  receiver User @relation("ReceiverRelation", fields: [receiverId], references: [id])
}
